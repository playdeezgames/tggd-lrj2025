@page "/"
@inject IJSRuntime JSRuntime

<PageTitle>Temporary Title of SPLORR!!</PageTitle>

<table class="pixel-grid-table" tabindex="1" @onkeydown="HandleKeyDown" @onkeydown:preventDefault="ShouldPreventDefault" autofocus>
	@foreach (int row in Enumerable.Range(0, BUFFER_HEIGHT))
	{
		<tr>
			@foreach(int column in Enumerable.Range(0,BUFFER_WIDTH))
			{
				<td class="pixel-grid-td" style="background-color: @GetBackgroundColor(column, row)"></td>
			}
		</tr>
	}
</table>

@code{
	IUIContext context = new UIContext(BUFFER_WIDTH, BUFFER_HEIGHT, FrameBuffer);
	const int BUFFER_WIDTH = 160;
	const int BUFFER_HEIGHT = 100;
	private bool ShouldPreventDefault = false;
	readonly IReadOnlyList<string> Palette = new List<string>()
	{
		"#000",
		"#00a",
		"#0a0",
		"#0aa",
		"#a00",
		"#a0a",
		"#a50",
		"#aaa",
		"#555",
		"#55f",
		"#5f5",
		"#5ff",
		"#f55",
		"#f5f",
		"#ff5",
		"#fff"
	};
	readonly IReadOnlyDictionary<string, string> CommandTable = new Dictionary<string, string>()
		{
			["q"] = Command.Left,
			["z"] = Command.Up,
			["w"] = Command.Up,
			["a"] = Command.Left,
			["s"] = Command.Down,
			["d"] = Command.Right,
			["ArrowUp"] = Command.Up,
			["ArrowDown"] = Command.Down,
			["ArrowLeft"] = Command.Left,
			["ArrowRight"] = Command.Right,
			[" "] = Command.Green,
			["Enter"] = Command.Blue,
			["Tab"] = Command.Yellow,
			["Escape"] = Command.Red
		};
	static int[] FrameBuffer = new int[BUFFER_HEIGHT * BUFFER_WIDTH];
	private string GetBackgroundColor(int column, int row)
	{
		return Palette[FrameBuffer[column + row * BUFFER_WIDTH]];
	}
	protected override void OnInitialized()
	{
		base.OnInitialized();
		context.Refresh();
	}
	private void HandleKeyDown(KeyboardEventArgs args)
	{
		if (CommandTable.TryGetValue(args.Key, out string? command))
		{
			ShouldPreventDefault = true;
			context!.HandleCommand(command);
			context!.Refresh();
		}
		else
		{
			ShouldPreventDefault = false;
		}
	}
}